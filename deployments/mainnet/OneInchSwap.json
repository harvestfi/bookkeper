{
  "address": "0x9B073379C2fCfb335F18aE88bb24bdC50D7c3B08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseCurrency",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "name": "getLargestPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPriceVsToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUnderlying",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa13e1896f52421a156451f140adf366115dd73ee97353371807be675eee3b84c",
  "receipt": {
    "to": null,
    "from": "0x5df9b4B44581433D830bafA7a5B1Ffc041e80E45",
    "contractAddress": "0x9B073379C2fCfb335F18aE88bb24bdC50D7c3B08",
    "transactionIndex": 127,
    "gasUsed": "970462",
    "logsBloom": "0x
    "blockHash": "0x0bcbb5abb76fabb88ed9c4605acb3a5b6b806e4887974a878613b0dda7b974de",
    "transactionHash": "0xa13e1896f52421a156451f140adf366115dd73ee97353371807be675eee3b84c",
    "logs": [],
    "blockNumber": 12820122,
    "cumulativeGasUsed": "11812843",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbAF9A5d4b0052359326A6CDAb54BABAa3a3A9643",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "solcInputHash": "86d506d2241e5c8b968af832cc4a1274",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseCurrency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"getLargestPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPriceVsToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLargestPool(address,address[])\":{\"details\":\"Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\"},\"getPriceVsToken(address,address,address)\":{\"details\":\"Generic function giving the price of a given token vs another given token\"},\"getUnderlying(address)\":{\"details\":\"Get underlying tokens and amounts\"},\"isPool(address)\":{\"details\":\"Check what token is pool of this Swap\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OneInchSwap.sol\":\"OneInchSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xcca9eeefad9d3c8a68e426833a5c790d055beebc3f1cefbeac20b096456c9aef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/OneInchSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\\\";\\r\\nimport \\\"./interface/mooniswap/IMooniFactory.sol\\\";\\r\\nimport \\\"./interface/mooniswap/IMooniswap.sol\\\";\\r\\nimport \\\"./SwapBase.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract OneInchSwap is SwapBase {\\r\\n\\r\\n  IMooniFactory oneInchFactory;\\r\\n\\r\\n  address public baseCurrency = address(0);\\r\\n\\r\\n  constructor(address _factoryAddress, address _baseCurrency) SwapBase(_factoryAddress) public {\\r\\n    baseCurrency = _baseCurrency;\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual override {\\r\\n    oneInchFactory =  IMooniFactory(factoryAddress);\\r\\n  }\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual override view returns(bool){\\r\\n    return oneInchFactory.isPool(token);\\r\\n  }\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\\r\\n    IMooniswap pair = IMooniswap(token);\\r\\n    address[] memory tokens  = new address[](2);\\r\\n    uint256[] memory amounts = new uint256[](2);\\r\\n    tokens[0] = pair.token0();\\r\\n    tokens[1] = pair.token1();\\r\\n    uint256 token0Decimals = (tokens[0]==address(0))? 18:ERC20(tokens[0]).decimals();\\r\\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\\r\\n    uint256 supplyDecimals = ERC20(token).decimals();\\r\\n    uint256 reserve0 = pair.getBalanceForRemoval(tokens[0]);\\r\\n    uint256 reserve1 = pair.getBalanceForRemoval(tokens[1]);\\r\\n    uint256 totalSupply = pair.totalSupply();\\r\\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\\r\\n      amounts[0] = 0;\\r\\n      amounts[1] = 0;\\r\\n      return (tokens, amounts);\\r\\n    }\\r\\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+PRECISION_DECIMALS)/totalSupply;\\r\\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+PRECISION_DECIMALS)/totalSupply;\\r\\n\\r\\n    //MAINNET:\\r\\n    //1INCH uses ETH, instead of WETH in pools. For further calculations we continue with WETH instead.\\r\\n    //ETH will always be the first in the pair, so no need to check tokens[1]\\r\\n    //BSC:\\r\\n    //1INCH uses BNB, instead of WBNB in pools. For further calculations we continue with WBNB instead.\\r\\n    //BNB will always be the first in the pair, so no need to check tokens[1]\\r\\n    if (tokens[0] == address(0)) {\\r\\n      tokens[0] = baseCurrency;\\r\\n    }\\r\\n    return (tokens, amounts);\\r\\n  }\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256) {\\r\\n    uint256 largestPoolSize = 0;\\r\\n    address largestKeyToken;\\r\\n    address largestPoolAddress;\\r\\n    address pairAddress;\\r\\n    uint256 poolSize;\\r\\n    uint256 i;\\r\\n    for (i = 0; i < tokenList.length; i++) {\\r\\n      pairAddress = oneInchFactory.pools(token, tokenList[i]);\\r\\n      if (pairAddress != address(0)) {\\r\\n        poolSize = get1InchPoolSize(pairAddress, token);\\r\\n      } else {\\r\\n        poolSize = 0;\\r\\n      }\\r\\n      if (poolSize > largestPoolSize) {\\r\\n        largestPoolSize = poolSize;\\r\\n        largestKeyToken = tokenList[i];\\r\\n        largestPoolAddress = pairAddress;\\r\\n      }\\r\\n    }\\r\\n    return (largestKeyToken, largestPoolAddress, largestPoolSize);\\r\\n  }\\r\\n\\r\\n  function get1InchPoolSize(address pairAddress, address token) internal view returns (uint256) {\\r\\n    IMooniswap pair = IMooniswap(pairAddress);\\r\\n    address token0 = pair.token0();\\r\\n    address token1 = pair.token1();\\r\\n    uint256 poolSize0;\\r\\n    uint256 poolSize1;\\r\\n\\r\\n    try pair.getBalanceForRemoval(token0) returns (uint256 poolSize) {\\r\\n      poolSize0 = poolSize;\\r\\n    } catch {\\r\\n      poolSize0 = 0;\\r\\n    }\\r\\n\\r\\n    try pair.getBalanceForRemoval(token1) returns (uint256 poolSize) {\\r\\n      poolSize1 = poolSize;\\r\\n    } catch {\\r\\n      poolSize1 = 0;\\r\\n    }\\r\\n\\r\\n    if (token0 == address(0)) {\\r\\n      token0 = baseCurrency;\\r\\n    }\\r\\n    uint256 poolSize = (token == token0) ? poolSize0 : poolSize1;\\r\\n    return poolSize;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address /*poolAddress*/) public virtual override view returns (uint256) {\\r\\n    address pairAddress = oneInchFactory.pools(token0, token1);\\r\\n    IMooniswap pair = IMooniswap(pairAddress);\\r\\n    uint256 reserve0 = pair.getBalanceForRemoval(token0);\\r\\n    uint256 reserve1 = pair.getBalanceForRemoval(token1);\\r\\n    uint256 token0Decimals = IBEP20(token0).decimals(); // was IBEP20\\r\\n    uint256 token1Decimals = IBEP20(token1).decimals(); // was IBEP20\\r\\n    uint256 price = (reserve1 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve0;\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xdf025cda8937814f0566d5b7ba901dda75e8910058080648510c0f74d0c06e0c\",\"license\":\"MIT\"},\"contracts/SwapBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nabstract contract SwapBase {\\r\\n\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 public constant PRECISION_DECIMALS = 18;\\r\\n\\r\\n  address factoryAddress;\\r\\n\\r\\n  constructor(address _factoryAddress) public {\\r\\n    require(_factoryAddress!=address(0), \\\"Factory must be set\\\");\\r\\n    factoryAddress = _factoryAddress;\\r\\n    initializeFactory();\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual;\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual view returns(bool);\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual view returns (address[] memory, uint256[] memory);\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual view returns (address, address, uint256);\\r\\n  // return (largestKeyToken, largestPoolAddress, largestPoolSize);\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address poolAddress) public virtual view returns (uint256) ;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x4914153e3de514e5dc6231a9bcf256e6f30518759f580d33f18b0a3621d98e82\",\"license\":\"MIT\"},\"contracts/interface/mooniswap/IMooniFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IMooniFactory {\\r\\n  function isPool(address token) external view returns(bool);\\r\\n  function getAllPools() external view returns(address[] memory);\\r\\n  function pools(address tokenA, address tokenB) external view returns(address);\\r\\n}\\r\\n\",\"keccak256\":\"0x1a3b42b8e77ca0db2432d14735ff3589a4c79738652c6cbb96df50e1d8f1d1e8\",\"license\":\"MIT\"},\"contracts/interface/mooniswap/IMooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IMooniswap {\\r\\n  function getBalanceForRemoval(address token) external view returns(uint256);\\r\\n  function token0() external view returns(address);\\r\\n  function token1() external view returns(address);\\r\\n  function totalSupply() external view returns(uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc5890b3c498b04a347164a503e443822d34a23725aead12a44f9a1a71f611e13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b031916905534801561002057600080fd5b506040516110723803806110728339818101604052604081101561004357600080fd5b508051602090910151816001600160a01b0381166100a8576040805162461bcd60e51b815260206004820152601360248201527f466163746f7279206d7573742062652073657400000000000000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790556100cb6100f2565b50600280546001600160a01b0319166001600160a01b039290921691909117905550610116565b600054600180546001600160a01b0319166001600160a01b03909216919091179055565b610f4d806101256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806303764923146100675780634e89a711146100b15780635b16ebb7146101705780635e72f13a146101aa57806360ebfee61461028557806392a85fde1461028d575b600080fd5b61009f6004803603606081101561007d57600080fd5b506001600160a01b0381358116916020810135821691604090910135166102b1565b60408051918252519081900360200190f35b6100d7600480360360208110156100c757600080fd5b50356001600160a01b031661053e565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561011b578181015183820152602001610103565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561015a578181015183820152602001610142565b5050505090500194505050505060405180910390f35b6101966004803603602081101561018657600080fd5b50356001600160a01b0316610b2f565b604080519115158252519081900360200190f35b61025b600480360360408110156101c057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101ea57600080fd5b8201836020820111156101fc57600080fd5b803590602001918460208302840111600160201b8311171561021d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610bb2945050505050565b604080516001600160a01b0394851681529290931660208301528183015290519081900360600190f35b61009f610cd1565b610295610cd6565b604080516001600160a01b039092168252519081900360200190f35b6001546040805163901754d760e01b81526001600160a01b038681166004830152858116602483015291516000938493169163901754d7916044808301926020929190829003018186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d602081101561033257600080fd5b50516040805163e7ff42c960e01b81526001600160a01b0388811660048301529151929350839260009284169163e7ff42c9916024808301926020929190829003018186803b15801561038457600080fd5b505afa158015610398573d6000803e3d6000fd5b505050506040513d60208110156103ae57600080fd5b50516040805163e7ff42c960e01b81526001600160a01b03898116600483015291519293506000929185169163e7ff42c991602480820192602092909190829003018186803b15801561040057600080fd5b505afa158015610414573d6000803e3d6000fd5b505050506040513d602081101561042a57600080fd5b50516040805163313ce56760e01b815290519192506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d602081101561049c57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b1580156104e857600080fd5b505afa1580156104fc573d6000803e3d6000fd5b505050506040513d602081101561051257600080fd5b505160ff169050600084828403601201600a0a85028161052e57fe5b049b9a5050505050505050505050565b604080516002808252606080830184529283928592849260208301908036833750506040805160028082526060808301845294955090925090602083019080368337019050509050826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b5051825183906000906105f857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d602081101561067b57600080fd5b505182518390600190811061068c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000806001600160a01b0316836000815181106106c557fe5b60200260200101516001600160a01b03161461075957826000815181106106e857fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561072857600080fd5b505afa15801561073c573d6000803e3d6000fd5b505050506040513d602081101561075257600080fd5b505161075c565b60125b60ff16905060008360018151811061077057fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b057600080fd5b505afa1580156107c4573d6000803e3d6000fd5b505050506040513d60208110156107da57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d602081101561085057600080fd5b5051855160ff90911691506000906001600160a01b0388169063e7ff42c9908890849061087957fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d60208110156108e857600080fd5b505186519091506000906001600160a01b0389169063e7ff42c9908990600190811061091057fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d602081101561097f57600080fd5b5051604080516318160ddd60e01b815290519192506000916001600160a01b038b16916318160ddd916004808301926020929190829003018186803b1580156109c757600080fd5b505afa1580156109db573d6000803e3d6000fd5b505050506040513d60208110156109f157600080fd5b50519050821580610a00575081155b80610a09575080155b15610a5657600087600081518110610a1d57fe5b602002602001018181525050600087600181518110610a3857fe5b602090810291909101015250959850939650610b2a95505050505050565b80601287860301600a0a840281610a6957fe5b0487600081518110610a7757fe5b60200260200101818152505080601286860301600a0a830281610a9657fe5b0487600181518110610aa457fe5b60200260200101818152505060006001600160a01b031688600081518110610ac857fe5b60200260200101516001600160a01b03161415610b1c5760025488516001600160a01b03909116908990600090610afb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b509598509396505050505050505b915091565b60015460408051635b16ebb760e01b81526001600160a01b03848116600483015291516000939290921691635b16ebb791602480820192602092909190829003018186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d6020811015610baa57600080fd5b505192915050565b600080808080808080805b8951811015610cc0576001548a516001600160a01b039091169063901754d7908d908d9085908110610beb57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d6020811015610c6a57600080fd5b505192506001600160a01b03831615610c8e57610c87838c610ce5565b9150610c93565b600091505b85821115610cb857819550898181518110610caa57fe5b602002602001015194508293505b600101610bbd565b509299919850929650945050505050565b601281565b6002546001600160a01b031681565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2657600080fd5b505afa158015610d3a573d6000803e3d6000fd5b505050506040513d6020811015610d5057600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0385169163d21220a7916004808301926020929190829003018186803b158015610d9857600080fd5b505afa158015610dac573d6000803e3d6000fd5b505050506040513d6020811015610dc257600080fd5b50516040805163e7ff42c960e01b81526001600160a01b0385811660048301529151929350600092839287169163e7ff42c9916024808301926020929190829003018186803b158015610e1457600080fd5b505afa925050508015610e3957506040513d6020811015610e3457600080fd5b505160015b610e465760009150610e49565b91505b846001600160a01b031663e7ff42c9846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e9657600080fd5b505afa925050508015610ebb57506040513d6020811015610eb657600080fd5b505160015b610ec757506000610eca565b90505b6001600160a01b038416610ee7576002546001600160a01b031693505b6000846001600160a01b0316886001600160a01b031614610f085781610f0a565b825b999850505050505050505056fea26469706673582212200e85773f0927044b658bfb07d355d78b5b5c642eacf104324c1ce516ff276a1864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806303764923146100675780634e89a711146100b15780635b16ebb7146101705780635e72f13a146101aa57806360ebfee61461028557806392a85fde1461028d575b600080fd5b61009f6004803603606081101561007d57600080fd5b506001600160a01b0381358116916020810135821691604090910135166102b1565b60408051918252519081900360200190f35b6100d7600480360360208110156100c757600080fd5b50356001600160a01b031661053e565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561011b578181015183820152602001610103565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561015a578181015183820152602001610142565b5050505090500194505050505060405180910390f35b6101966004803603602081101561018657600080fd5b50356001600160a01b0316610b2f565b604080519115158252519081900360200190f35b61025b600480360360408110156101c057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101ea57600080fd5b8201836020820111156101fc57600080fd5b803590602001918460208302840111600160201b8311171561021d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610bb2945050505050565b604080516001600160a01b0394851681529290931660208301528183015290519081900360600190f35b61009f610cd1565b610295610cd6565b604080516001600160a01b039092168252519081900360200190f35b6001546040805163901754d760e01b81526001600160a01b038681166004830152858116602483015291516000938493169163901754d7916044808301926020929190829003018186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d602081101561033257600080fd5b50516040805163e7ff42c960e01b81526001600160a01b0388811660048301529151929350839260009284169163e7ff42c9916024808301926020929190829003018186803b15801561038457600080fd5b505afa158015610398573d6000803e3d6000fd5b505050506040513d60208110156103ae57600080fd5b50516040805163e7ff42c960e01b81526001600160a01b03898116600483015291519293506000929185169163e7ff42c991602480820192602092909190829003018186803b15801561040057600080fd5b505afa158015610414573d6000803e3d6000fd5b505050506040513d602081101561042a57600080fd5b50516040805163313ce56760e01b815290519192506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d602081101561049c57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b1580156104e857600080fd5b505afa1580156104fc573d6000803e3d6000fd5b505050506040513d602081101561051257600080fd5b505160ff169050600084828403601201600a0a85028161052e57fe5b049b9a5050505050505050505050565b604080516002808252606080830184529283928592849260208301908036833750506040805160028082526060808301845294955090925090602083019080368337019050509050826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d60208110156105e957600080fd5b5051825183906000906105f857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d602081101561067b57600080fd5b505182518390600190811061068c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000806001600160a01b0316836000815181106106c557fe5b60200260200101516001600160a01b03161461075957826000815181106106e857fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561072857600080fd5b505afa15801561073c573d6000803e3d6000fd5b505050506040513d602081101561075257600080fd5b505161075c565b60125b60ff16905060008360018151811061077057fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b057600080fd5b505afa1580156107c4573d6000803e3d6000fd5b505050506040513d60208110156107da57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d602081101561085057600080fd5b5051855160ff90911691506000906001600160a01b0388169063e7ff42c9908890849061087957fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d60208110156108e857600080fd5b505186519091506000906001600160a01b0389169063e7ff42c9908990600190811061091057fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d602081101561097f57600080fd5b5051604080516318160ddd60e01b815290519192506000916001600160a01b038b16916318160ddd916004808301926020929190829003018186803b1580156109c757600080fd5b505afa1580156109db573d6000803e3d6000fd5b505050506040513d60208110156109f157600080fd5b50519050821580610a00575081155b80610a09575080155b15610a5657600087600081518110610a1d57fe5b602002602001018181525050600087600181518110610a3857fe5b602090810291909101015250959850939650610b2a95505050505050565b80601287860301600a0a840281610a6957fe5b0487600081518110610a7757fe5b60200260200101818152505080601286860301600a0a830281610a9657fe5b0487600181518110610aa457fe5b60200260200101818152505060006001600160a01b031688600081518110610ac857fe5b60200260200101516001600160a01b03161415610b1c5760025488516001600160a01b03909116908990600090610afb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b509598509396505050505050505b915091565b60015460408051635b16ebb760e01b81526001600160a01b03848116600483015291516000939290921691635b16ebb791602480820192602092909190829003018186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d6020811015610baa57600080fd5b505192915050565b600080808080808080805b8951811015610cc0576001548a516001600160a01b039091169063901754d7908d908d9085908110610beb57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d6020811015610c6a57600080fd5b505192506001600160a01b03831615610c8e57610c87838c610ce5565b9150610c93565b600091505b85821115610cb857819550898181518110610caa57fe5b602002602001015194508293505b600101610bbd565b509299919850929650945050505050565b601281565b6002546001600160a01b031681565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2657600080fd5b505afa158015610d3a573d6000803e3d6000fd5b505050506040513d6020811015610d5057600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0385169163d21220a7916004808301926020929190829003018186803b158015610d9857600080fd5b505afa158015610dac573d6000803e3d6000fd5b505050506040513d6020811015610dc257600080fd5b50516040805163e7ff42c960e01b81526001600160a01b0385811660048301529151929350600092839287169163e7ff42c9916024808301926020929190829003018186803b158015610e1457600080fd5b505afa925050508015610e3957506040513d6020811015610e3457600080fd5b505160015b610e465760009150610e49565b91505b846001600160a01b031663e7ff42c9846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e9657600080fd5b505afa925050508015610ebb57506040513d6020811015610eb657600080fd5b505160015b610ec757506000610eca565b90505b6001600160a01b038416610ee7576002546001600160a01b031693505b6000846001600160a01b0316886001600160a01b031614610f085781610f0a565b825b999850505050505050505056fea26469706673582212200e85773f0927044b658bfb07d355d78b5b5c642eacf104324c1ce516ff276a1864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLargestPool(address,address[])": {
        "details": "Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)"
      },
      "getPriceVsToken(address,address,address)": {
        "details": "Generic function giving the price of a given token vs another given token"
      },
      "getUnderlying(address)": {
        "details": "Get underlying tokens and amounts"
      },
      "isPool(address)": {
        "details": "Check what token is pool of this Swap"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16132,
        "contract": "contracts/OneInchSwap.sol:OneInchSwap",
        "label": "factoryAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5734,
        "contract": "contracts/OneInchSwap.sol:OneInchSwap",
        "label": "oneInchFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMooniFactory)17087"
      },
      {
        "astId": 5740,
        "contract": "contracts/OneInchSwap.sol:OneInchSwap",
        "label": "baseCurrency",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IMooniFactory)17087": {
        "encoding": "inplace",
        "label": "contract IMooniFactory",
        "numberOfBytes": "20"
      }
    }
  }
}