{
  "address": "0x200e4792FD41EC2C2F8d58890E01ae5Af939B3ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "name": "getLargestPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPriceVsToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUnderlying",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5434d22ce0405dce07e98bb468a4bffa58d23808ed0d6e8b1f9ecbc0003a299",
  "receipt": {
    "to": null,
    "from": "0x5df9b4B44581433D830bafA7a5B1Ffc041e80E45",
    "contractAddress": "0x200e4792FD41EC2C2F8d58890E01ae5Af939B3ac",
    "transactionIndex": 64,
    "gasUsed": "824868",
    "logsBloom": "0x
    "blockHash": "0xec6266ed656f966d2b22290aa175f14a2d2e2d1624bae261561b570292a83ef5",
    "transactionHash": "0xb5434d22ce0405dce07e98bb468a4bffa58d23808ed0d6e8b1f9ecbc0003a299",
    "logs": [],
    "blockNumber": 9142019,
    "cumulativeGasUsed": "11206712",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73"
  ],
  "solcInputHash": "86d506d2241e5c8b968af832cc4a1274",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"getLargestPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPriceVsToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLargestPool(address,address[])\":{\"details\":\"Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\"},\"getPriceVsToken(address,address,address)\":{\"details\":\"Generic function giving the price of a given token vs another given token\"},\"getUnderlying(address)\":{\"details\":\"Get underlying tokens and amounts\"},\"isPool(address)\":{\"details\":\"Check what token is pool of this Swap\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PancakeSwap.sol\":\"PancakeSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xcca9eeefad9d3c8a68e426833a5c790d055beebc3f1cefbeac20b096456c9aef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/PancakeSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\\\";\\r\\nimport \\\"./interface/pancakeswap/IPancakeFactory.sol\\\";\\r\\nimport \\\"./interface/pancakeswap/IPancakePair.sol\\\";\\r\\nimport \\\"./SwapBase.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract PancakeSwap is SwapBase {\\r\\n\\r\\n  IPancakeFactory pancakeFactory;\\r\\n\\r\\n  constructor(address _factoryAddress) SwapBase(_factoryAddress) public {\\r\\n\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual override {\\r\\n    pancakeFactory = IPancakeFactory(factoryAddress);\\r\\n  }\\r\\n\\r\\n  function checkFactory(IPancakePair pair, address compareFactory) internal view returns (bool) {\\r\\n    bool check;\\r\\n    try pair.factory{gas: 3000}() returns (address factory) {\\r\\n      check = (factory == compareFactory);\\r\\n    } catch {\\r\\n      check = false;\\r\\n    }\\r\\n    return check;\\r\\n  }\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual override view returns(bool){\\r\\n    IPancakePair pair = IPancakePair(token);\\r\\n    return checkFactory(pair, factoryAddress);\\r\\n  }\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual override view returns (address[] memory, uint256[] memory){\\r\\n    IPancakePair pair = IPancakePair(token);\\r\\n    IBEP20 pairToken = IBEP20(token);\\r\\n    address[] memory tokens  = new address[](2);\\r\\n    uint256[] memory amounts = new uint256[](2);\\r\\n    tokens[0] = pair.token0();\\r\\n    tokens[1] = pair.token1();\\r\\n    uint256 token0Decimals = IBEP20(tokens[0]).decimals();\\r\\n    uint256 token1Decimals = IBEP20(tokens[1]).decimals();\\r\\n    uint256 supplyDecimals = IBEP20(token).decimals();\\r\\n    (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\r\\n    uint256 totalSupply = pairToken.totalSupply();\\r\\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\\r\\n      amounts[0] = 0;\\r\\n      amounts[1] = 0;\\r\\n      return (tokens, amounts);\\r\\n    }\\r\\n    amounts[0] = reserve0 * 10 ** (supplyDecimals - token0Decimals + PRECISION_DECIMALS) / totalSupply;\\r\\n    amounts[1] = reserve1 * 10 ** (supplyDecimals - token1Decimals + PRECISION_DECIMALS) / totalSupply;\\r\\n    return (tokens, amounts);\\r\\n  }\\r\\n\\r\\n  /// @dev Returns pool size\\r\\n  function getPoolSize(address pairAddress, address token) internal view returns(uint256){\\r\\n    IPancakePair pair = IPancakePair(pairAddress);\\r\\n    address token0 = pair.token0();\\r\\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\\r\\n    uint256 poolSize = (token == token0) ? poolSize0 : poolSize1;\\r\\n    return poolSize;\\r\\n  }\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual override view returns (address, address, uint256){\\r\\n    uint256 largestPoolSize = 0;\\r\\n    address largestKeyToken;\\r\\n    address largestPool;\\r\\n    uint256 poolSize;\\r\\n    uint256 i;\\r\\n    for (i=0;i<tokenList.length;i++) {\\r\\n      address poolAddress = pancakeFactory.getPair(token,tokenList[i]);\\r\\n      poolSize = poolAddress !=address(0) ? getPoolSize(poolAddress, token) : 0;\\r\\n      if (poolSize > largestPoolSize) {\\r\\n        largestKeyToken = tokenList[i];\\r\\n        largestPool = poolAddress;\\r\\n        largestPoolSize = poolSize;\\r\\n      }\\r\\n    }\\r\\n    return (largestKeyToken, largestPool, largestPoolSize);\\r\\n  }\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address /*poolAddress*/) public virtual override view returns (uint256){\\r\\n    address pairAddress = pancakeFactory.getPair(token0, token1);\\r\\n    IPancakePair pair = IPancakePair(pairAddress);\\r\\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n    uint256 token0Decimals = IBEP20(token0).decimals();\\r\\n    uint256 token1Decimals = IBEP20(token1).decimals();\\r\\n    uint256 price;\\r\\n    if (token0 == pair.token0()) {\\r\\n      price = (reserve1 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve0;\\r\\n    } else {\\r\\n      price = (reserve0 * 10 ** (token0Decimals - token1Decimals + PRECISION_DECIMALS)) / reserve1;\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7305f2c2c587dceaa65c62013228e748a8bb71d1a4a06578b4624ae1510b78\",\"license\":\"MIT\"},\"contracts/SwapBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nabstract contract SwapBase {\\r\\n\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  uint256 public constant PRECISION_DECIMALS = 18;\\r\\n\\r\\n  address factoryAddress;\\r\\n\\r\\n  constructor(address _factoryAddress) public {\\r\\n    require(_factoryAddress!=address(0), \\\"Factory must be set\\\");\\r\\n    factoryAddress = _factoryAddress;\\r\\n    initializeFactory();\\r\\n  }\\r\\n\\r\\n  function initializeFactory() internal virtual;\\r\\n\\r\\n  /// @dev Check what token is pool of this Swap\\r\\n  function isPool(address token) public virtual view returns(bool);\\r\\n\\r\\n  /// @dev Get underlying tokens and amounts\\r\\n  function getUnderlying(address token) public virtual view returns (address[] memory, uint256[] memory);\\r\\n\\r\\n  /// @dev Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) public virtual view returns (address, address, uint256);\\r\\n  // return (largestKeyToken, largestPoolAddress, largestPoolSize);\\r\\n\\r\\n  /// @dev Generic function giving the price of a given token vs another given token\\r\\n  function getPriceVsToken(address token0, address token1, address poolAddress) public virtual view returns (uint256) ;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x4914153e3de514e5dc6231a9bcf256e6f30518759f580d33f18b0a3621d98e82\",\"license\":\"MIT\"},\"contracts/interface/pancakeswap/IPancakeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd7fa120f3fee8ba339644e91e9a36f61523772be91c6b666be0bac408fe742bb\",\"license\":\"MIT\"},\"contracts/interface/pancakeswap/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0xb924a204bbc3ec8287248ac8e33fd51d783039119165a1217ad2f842dfbdb051\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e0f380380610e0f8339818101604052602081101561003357600080fd5b5051806001600160a01b038116610091576040805162461bcd60e51b815260206004820152601360248201527f466163746f7279206d7573742062652073657400000000000000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790556100b46100bb565b50506100df565b600054600180546001600160a01b0319166001600160a01b03909216919091179055565b610d21806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063037649231461005c5780634e89a711146100a65780635b16ebb7146101655780635e72f13a1461019f57806360ebfee61461027a575b600080fd5b6100946004803603606081101561007257600080fd5b506001600160a01b038135811691602081013582169160409091013516610282565b60408051918252519081900360200190f35b6100cc600480360360208110156100bc57600080fd5b50356001600160a01b0316610540565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101105781810151838201526020016100f8565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561014f578181015183820152602001610137565b5050505090500194505050505060405180910390f35b61018b6004803603602081101561017b57600080fd5b50356001600160a01b03166109f9565b604080519115158252519081900360200190f35b610250600480360360408110156101b557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101df57600080fd5b8201836020820111156101f157600080fd5b803590602001918460208302840111600160201b8311171561021257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610a1a945050505050565b604080516001600160a01b0394851681529290931660208301528183015290519081900360600190f35b610094610b36565b6001546040805163e6a4390560e01b81526001600160a01b038681166004830152858116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d602081101561030357600080fd5b505160408051630240bc6b60e21b81529051919250829160009182916001600160a01b03851691630902f1ac916004808301926060929190829003018186803b15801561034f57600080fd5b505afa158015610363573d6000803e3d6000fd5b505050506040513d606081101561037957600080fd5b5080516020918201516040805163313ce56760e01b815290516001600160701b0393841696509290911693506000926001600160a01b038c169263313ce567926004808201939291829003018186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d60208110156103ff57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d602081101561047557600080fd5b505160408051630dfe168160e01b8152905160ff90921692506000916001600160a01b03881691630dfe1681916004808301926020929190829003018186803b1580156104c157600080fd5b505afa1580156104d5573d6000803e3d6000fd5b505050506040513d60208110156104eb57600080fd5b50516001600160a01b038c81169116141561051b5784601283850301600a0a85028161051357fe5b049050610532565b83601283850301600a0a86028161052e57fe5b0490505b9a9950505050505050505050565b6040805160028082526060828101909352829184918291849181602001602082028036833750506040805160028082526060808301845294955090925090602083019080368337019050509050836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c657600080fd5b505afa1580156105da573d6000803e3d6000fd5b505050506040513d60208110156105f057600080fd5b5051825183906000906105ff57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d602081101561068257600080fd5b505182518390600190811061069357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000826000815181106106c257fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561070257600080fd5b505afa158015610716573d6000803e3d6000fd5b505050506040513d602081101561072c57600080fd5b5051835160ff90911691506000908490600190811061074757fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561078757600080fd5b505afa15801561079b573d6000803e3d6000fd5b505050506040513d60208110156107b157600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038c169163313ce567916004808301926020929190829003018186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d602081101561082757600080fd5b505160408051630240bc6b60e21b8152905160ff909216925060009182916001600160a01b038b1691630902f1ac91600480820192606092909190829003018186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d60608110156108a057600080fd5b508051602091820151604080516318160ddd60e01b815290516001600160701b0393841696509290911693506000926001600160a01b038c16926318160ddd926004808201939291829003018186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d602081101561092657600080fd5b50519050821580610935575081155b8061093e575080155b1561098c5760008760008151811061095257fe5b60200260200101818152505060008760018151811061096d57fe5b6020908102919091010152509599509397506109f49650505050505050565b80601287860301600a0a84028161099f57fe5b04876000815181106109ad57fe5b60200260200101818152505080601286860301600a0a8302816109cc57fe5b04876001815181106109da57fe5b602090810291909101015250959950939750505050505050505b915091565b600080548290610a139082906001600160a01b0316610b3b565b9392505050565b6000808080808080805b8851811015610b255760015489516000916001600160a01b03169063e6a43905908d908d9086908110610a5357fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d6020811015610ad257600080fd5b505190506001600160a01b038116610aeb576000610af5565b610af5818c610bcb565b925085831115610b1c57898281518110610b0b57fe5b602002602001015194508093508295505b50600101610a24565b509195509350909150509250925092565b601281565b600080836001600160a01b031663c45a0155610bb86040518263ffffffff1660e01b815260040160206040518083038187803b158015610b7a57600080fd5b5086fa93505050508015610ba057506040513d6020811015610b9b57600080fd5b505160015b610bac57506000610a13565b836001600160a01b0316816001600160a01b0316149150509392505050565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d6020811015610c3657600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03861691630902f1ac91600480820192606092909190829003018186803b158015610c8157600080fd5b505afa158015610c95573d6000803e3d6000fd5b505050506040513d6060811015610cab57600080fd5b508051602090910151909250905060006001600160a01b0387811690851614610cd45781610cd6565b825b6001600160701b03169897505050505050505056fea264697066735822122063016ffac00182e9ae63f079b7b69c6ab30aed36f09f30d33d4bceed6fc483f464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063037649231461005c5780634e89a711146100a65780635b16ebb7146101655780635e72f13a1461019f57806360ebfee61461027a575b600080fd5b6100946004803603606081101561007257600080fd5b506001600160a01b038135811691602081013582169160409091013516610282565b60408051918252519081900360200190f35b6100cc600480360360208110156100bc57600080fd5b50356001600160a01b0316610540565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101105781810151838201526020016100f8565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561014f578181015183820152602001610137565b5050505090500194505050505060405180910390f35b61018b6004803603602081101561017b57600080fd5b50356001600160a01b03166109f9565b604080519115158252519081900360200190f35b610250600480360360408110156101b557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101df57600080fd5b8201836020820111156101f157600080fd5b803590602001918460208302840111600160201b8311171561021257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610a1a945050505050565b604080516001600160a01b0394851681529290931660208301528183015290519081900360600190f35b610094610b36565b6001546040805163e6a4390560e01b81526001600160a01b038681166004830152858116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d602081101561030357600080fd5b505160408051630240bc6b60e21b81529051919250829160009182916001600160a01b03851691630902f1ac916004808301926060929190829003018186803b15801561034f57600080fd5b505afa158015610363573d6000803e3d6000fd5b505050506040513d606081101561037957600080fd5b5080516020918201516040805163313ce56760e01b815290516001600160701b0393841696509290911693506000926001600160a01b038c169263313ce567926004808201939291829003018186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d60208110156103ff57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b15801561044b57600080fd5b505afa15801561045f573d6000803e3d6000fd5b505050506040513d602081101561047557600080fd5b505160408051630dfe168160e01b8152905160ff90921692506000916001600160a01b03881691630dfe1681916004808301926020929190829003018186803b1580156104c157600080fd5b505afa1580156104d5573d6000803e3d6000fd5b505050506040513d60208110156104eb57600080fd5b50516001600160a01b038c81169116141561051b5784601283850301600a0a85028161051357fe5b049050610532565b83601283850301600a0a86028161052e57fe5b0490505b9a9950505050505050505050565b6040805160028082526060828101909352829184918291849181602001602082028036833750506040805160028082526060808301845294955090925090602083019080368337019050509050836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c657600080fd5b505afa1580156105da573d6000803e3d6000fd5b505050506040513d60208110156105f057600080fd5b5051825183906000906105ff57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561065857600080fd5b505afa15801561066c573d6000803e3d6000fd5b505050506040513d602081101561068257600080fd5b505182518390600190811061069357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000826000815181106106c257fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561070257600080fd5b505afa158015610716573d6000803e3d6000fd5b505050506040513d602081101561072c57600080fd5b5051835160ff90911691506000908490600190811061074757fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561078757600080fd5b505afa15801561079b573d6000803e3d6000fd5b505050506040513d60208110156107b157600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038c169163313ce567916004808301926020929190829003018186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d602081101561082757600080fd5b505160408051630240bc6b60e21b8152905160ff909216925060009182916001600160a01b038b1691630902f1ac91600480820192606092909190829003018186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d60608110156108a057600080fd5b508051602091820151604080516318160ddd60e01b815290516001600160701b0393841696509290911693506000926001600160a01b038c16926318160ddd926004808201939291829003018186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d602081101561092657600080fd5b50519050821580610935575081155b8061093e575080155b1561098c5760008760008151811061095257fe5b60200260200101818152505060008760018151811061096d57fe5b6020908102919091010152509599509397506109f49650505050505050565b80601287860301600a0a84028161099f57fe5b04876000815181106109ad57fe5b60200260200101818152505080601286860301600a0a8302816109cc57fe5b04876001815181106109da57fe5b602090810291909101015250959950939750505050505050505b915091565b600080548290610a139082906001600160a01b0316610b3b565b9392505050565b6000808080808080805b8851811015610b255760015489516000916001600160a01b03169063e6a43905908d908d9086908110610a5357fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d6020811015610ad257600080fd5b505190506001600160a01b038116610aeb576000610af5565b610af5818c610bcb565b925085831115610b1c57898281518110610b0b57fe5b602002602001015194508093508295505b50600101610a24565b509195509350909150509250925092565b601281565b600080836001600160a01b031663c45a0155610bb86040518263ffffffff1660e01b815260040160206040518083038187803b158015610b7a57600080fd5b5086fa93505050508015610ba057506040513d6020811015610b9b57600080fd5b505160015b610bac57506000610a13565b836001600160a01b0316816001600160a01b0316149150509392505050565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d6020811015610c3657600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03861691630902f1ac91600480820192606092909190829003018186803b158015610c8157600080fd5b505afa158015610c95573d6000803e3d6000fd5b505050506040513d6060811015610cab57600080fd5b508051602090910151909250905060006001600160a01b0387811690851614610cd45781610cd6565b825b6001600160701b03169897505050505050505056fea264697066735822122063016ffac00182e9ae63f079b7b69c6ab30aed36f09f30d33d4bceed6fc483f464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLargestPool(address,address[])": {
        "details": "Gives a pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)"
      },
      "getPriceVsToken(address,address,address)": {
        "details": "Generic function giving the price of a given token vs another given token"
      },
      "getUnderlying(address)": {
        "details": "Get underlying tokens and amounts"
      },
      "isPool(address)": {
        "details": "Check what token is pool of this Swap"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16132,
        "contract": "contracts/PancakeSwap.sol:PancakeSwap",
        "label": "factoryAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15598,
        "contract": "contracts/PancakeSwap.sol:PancakeSwap",
        "label": "pancakeFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPancakeFactory)17175"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeFactory)17175": {
        "encoding": "inplace",
        "label": "contract IPancakeFactory",
        "numberOfBytes": "20"
      }
    }
  }
}