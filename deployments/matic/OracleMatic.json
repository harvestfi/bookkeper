{
  "address": "0xb8c898e946a1E82f244c7fcAa1f6BD4dE028D559",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newException",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exceptionList",
          "type": "uint256"
        }
      ],
      "name": "CurveExceptionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldException",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exceptionList",
          "type": "uint256"
        }
      ],
      "name": "CurveExceptionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOutputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOutputToken",
          "type": "address"
        }
      ],
      "name": "DefinedOutputChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFactory",
          "type": "address"
        }
      ],
      "name": "FactoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newKeyToken",
          "type": "address"
        }
      ],
      "name": "KeyTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "keyToken",
          "type": "address"
        }
      ],
      "name": "KeyTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPricingToken",
          "type": "address"
        }
      ],
      "name": "PricingTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pricingToken",
          "type": "address"
        }
      ],
      "name": "PricingTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRegistry",
          "type": "address"
        }
      ],
      "name": "RegistryChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "addKeyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "addPricingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOutputToken",
          "type": "address"
        }
      ],
      "name": "changeDefinedOutput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "changeQuickFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "changeSushiFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkKeyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "checkPricingToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "computePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "definedOutputToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUniUnderlying",
      "outputs": [
        {
          "internalType": "address[2]",
          "name": "",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "keyTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precisionDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pricingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickswapFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keyToken",
          "type": "address"
        }
      ],
      "name": "removeKeyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pricingToken",
          "type": "address"
        }
      ],
      "name": "removePricingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_store",
          "type": "address"
        }
      ],
      "name": "setStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "store",
      "outputs": [
        {
          "internalType": "contract Storage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiswapFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7d77d8261c84e4a25c56e67a05d5ed421cc719957f9f35a5331caece77afd01",
  "receipt": {
    "to": null,
    "from": "0x5df9b4B44581433D830bafA7a5B1Ffc041e80E45",
    "contractAddress": "0xb8c898e946a1E82f244c7fcAa1f6BD4dE028D559",
    "transactionIndex": 85,
    "gasUsed": "2369035",
    "logsBloom": "0x
    "blockHash": "0x3eccfb9e9683b6179d79759b25364f8dba5c34a843b9bd2d89e1f3fe3e596e16",
    "transactionHash": "0xf7d77d8261c84e4a25c56e67a05d5ed421cc719957f9f35a5331caece77afd01",
    "logs": [
      {
        "transactionIndex": 85,
        "blockNumber": 16009374,
        "transactionHash": "0xf7d77d8261c84e4a25c56e67a05d5ed421cc719957f9f35a5331caece77afd01",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005df9b4b44581433d830bafa7a5b1ffc041e80e45",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000957a22d7ed08000000000000000000000000000000000000000000000005ba62105b8ce5a11310000000000000000000000000000000000000000000010bb54b564f3535c30f100000000000000000000000000000000000000000000005ba617ae16a0db40b10000000000000000000000000000000000000000000010bb54bebc9580db0171",
        "logIndex": 355,
        "blockHash": "0x3eccfb9e9683b6179d79759b25364f8dba5c34a843b9bd2d89e1f3fe3e596e16"
      }
    ],
    "blockNumber": 16009374,
    "cumulativeGasUsed": "12539292",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x77770894742195507Db5245553c64A63EC636978"
  ],
  "solcInputHash": "3b09d711fc19ca306d2a23d829517591",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newException\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exceptionList\",\"type\":\"uint256\"}],\"name\":\"CurveExceptionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldException\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exceptionList\",\"type\":\"uint256\"}],\"name\":\"CurveExceptionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOutputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOutputToken\",\"type\":\"address\"}],\"name\":\"DefinedOutputChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFactory\",\"type\":\"address\"}],\"name\":\"FactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeyToken\",\"type\":\"address\"}],\"name\":\"KeyTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keyToken\",\"type\":\"address\"}],\"name\":\"KeyTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPricingToken\",\"type\":\"address\"}],\"name\":\"PricingTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pricingToken\",\"type\":\"address\"}],\"name\":\"PricingTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRegistry\",\"type\":\"address\"}],\"name\":\"RegistryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addKeyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"addPricingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOutputToken\",\"type\":\"address\"}],\"name\":\"changeDefinedOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"changeQuickFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"changeSushiFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkKeyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkPricingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"computePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"definedOutputToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUniUnderlying\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precisionDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickswapFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keyToken\",\"type\":\"address\"}],\"name\":\"removeKeyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pricingToken\",\"type\":\"address\"}],\"name\":\"removePricingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleMatic.sol\":\"OracleMatic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\nimport \\\"./Storage.sol\\\";\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  Storage public store;\\r\\n\\r\\n  constructor(address _store) public {\\r\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n    store = Storage(_store);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setStorage(address _store) public onlyGovernance {\\r\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n    store = Storage(_store);\\r\\n  }\\r\\n\\r\\n  function governance() public view returns (address) {\\r\\n    return store.governance();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x15111ae52dd2a404d82c9369a319e6be7588f1562e8ce0b3ad72265d512e1bcd\",\"license\":\"MIT\"},\"contracts/OracleMatic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"./interface/uniswap/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interface/uniswap/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./interface/mooniswap/IMooniFactory.sol\\\";\\r\\nimport \\\"./interface/mooniswap/IMooniswap.sol\\\";\\r\\nimport \\\"./Governable.sol\\\";\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ncontract OracleMatic is Governable {\\r\\n\\r\\n  using SafeERC20 for IERC20;\\r\\n  using Address for address;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  //Addresses for factories and registries for different DEX platforms. Functions will be added to allow to alter these when needed.\\r\\n  address public quickswapFactoryAddress = 0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32;  //QUICK swap address\\r\\n  address public sushiswapFactoryAddress = 0xc35DADB65012eC5796536bD9864eD8773aBc74C4;\\r\\n\\r\\n  uint256 public precisionDecimals = 18;\\r\\n\\r\\n  IUniswapV2Factory quickswapFactory = IUniswapV2Factory(quickswapFactoryAddress);\\r\\n  IUniswapV2Factory sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\\r\\n\\r\\n  //Key tokens are used to find liquidity for any given token on Quick, Sushi\\r\\n  address[] public keyTokens = [\\r\\n    0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270, //WMATIC\\r\\n    0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174, //USDC\\r\\n    0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619, //WETH\\r\\n    0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063, //DAI\\r\\n    0xc2132D05D31c914a87C6611C10748AEb04B58e8F, //USDT\\r\\n    0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6  //WBTC\\r\\n  ];\\r\\n  //Pricing tokens are Key tokens with good liquidity with the defined output token on Quickswap.\\r\\n  address[] public pricingTokens = [\\r\\n    0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270, //WMATIC\\r\\n    0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174, //USDC\\r\\n    0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619, //WETH\\r\\n    0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063, //DAI\\r\\n    0xc2132D05D31c914a87C6611C10748AEb04B58e8F, //USDT\\r\\n    0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6  //WBTC\\r\\n  ];\\r\\n  //The defined output token is the unit in which prices of input tokens are given.\\r\\n  address public definedOutputToken = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174; //USDC\\r\\n\\r\\n  modifier validKeyToken(address keyToken){\\r\\n      require(checkKeyToken(keyToken), \\\"Not a Key Token\\\");\\r\\n      _;\\r\\n  }\\r\\n  modifier validPricingToken(address pricingToken){\\r\\n      require(checkPricingToken(pricingToken), \\\"Not a Pricing Token\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  event FactoryChanged(address newFactory, address oldFactory);\\r\\n  event RegistryChanged(address newRegistry, address oldRegistry);\\r\\n  event KeyTokenAdded(address newKeyToken);\\r\\n  event PricingTokenAdded(address newPricingToken);\\r\\n  event KeyTokenRemoved(address keyToken);\\r\\n  event PricingTokenRemoved(address pricingToken);\\r\\n  event DefinedOutputChanged(address newOutputToken, address oldOutputToken);\\r\\n  event CurveExceptionAdded(address newException, uint256 exceptionList);\\r\\n  event CurveExceptionRemoved(address oldException, uint256 exceptionList);\\r\\n\\r\\n  constructor(address _storage)\\r\\n  Governable(_storage) public {}\\r\\n\\r\\n  function changeQuickFactory(address newFactory) external onlyGovernance {\\r\\n    address oldFactory = quickswapFactoryAddress;\\r\\n    quickswapFactoryAddress = newFactory;\\r\\n    quickswapFactory = IUniswapV2Factory(quickswapFactoryAddress);\\r\\n    emit FactoryChanged(newFactory, oldFactory);\\r\\n  }\\r\\n  function changeSushiFactory(address newFactory) external onlyGovernance {\\r\\n    address oldFactory = sushiswapFactoryAddress;\\r\\n    sushiswapFactoryAddress = newFactory;\\r\\n    sushiswapFactory = IUniswapV2Factory(sushiswapFactoryAddress);\\r\\n    emit FactoryChanged(newFactory, oldFactory);\\r\\n  }\\r\\n\\r\\n  function addKeyToken(address newToken) external onlyGovernance {\\r\\n    require((checkKeyToken(newToken)==false), \\\"Already a key token\\\");\\r\\n    keyTokens.push(newToken);\\r\\n    emit KeyTokenAdded(newToken);\\r\\n  }\\r\\n\\r\\n  function addPricingToken(address newToken) public onlyGovernance validKeyToken(newToken) {\\r\\n    require((checkPricingToken(newToken)==false), \\\"Already a pricing token\\\");\\r\\n    pricingTokens.push(newToken);\\r\\n    emit PricingTokenAdded(newToken);\\r\\n  }\\r\\n\\r\\n  function removeKeyToken(address keyToken) external onlyGovernance validKeyToken(keyToken) {\\r\\n    uint256 i;\\r\\n    for ( i=0;i<keyTokens.length;i++) {\\r\\n      if (keyToken == keyTokens[i]){\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    while (i<keyTokens.length-1) {\\r\\n      keyTokens[i] = keyTokens[i+1];\\r\\n      i++;\\r\\n    }\\r\\n    keyTokens.pop();\\r\\n    emit KeyTokenRemoved(keyToken);\\r\\n\\r\\n    if (checkPricingToken(keyToken)) {\\r\\n      removePricingToken(keyToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function removePricingToken(address pricingToken) public onlyGovernance validPricingToken(pricingToken) {\\r\\n    uint256 i;\\r\\n    for (i=0;i<pricingTokens.length;i++) {\\r\\n      if (pricingToken == pricingTokens[i]){\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    while (i<pricingTokens.length-1) {\\r\\n      pricingTokens[i] = pricingTokens[i+1];\\r\\n      i++;\\r\\n    }\\r\\n    pricingTokens.pop();\\r\\n    emit PricingTokenRemoved(pricingToken);\\r\\n  }\\r\\n  function changeDefinedOutput(address newOutputToken) external onlyGovernance validKeyToken(newOutputToken) {\\r\\n    address oldOutputToken = definedOutputToken;\\r\\n    definedOutputToken = newOutputToken;\\r\\n    emit DefinedOutputChanged(newOutputToken, oldOutputToken);\\r\\n  }\\r\\n\\r\\n  //Main function of the contract. Gives the price of a given token in the defined output token.\\r\\n  //The contract allows for input tokens to be LP tokens from Quickswap, Sushiswap\\r\\n  //In case of LP token, the underlying tokens will be found and valued to get the price.\\r\\n  function getPrice(address token) external view returns (uint256) {\\r\\n    if (token == definedOutputToken) {\\r\\n      return (10**precisionDecimals);\\r\\n    }\\r\\n    bool quickSushiLP = isQuickSushiCheck(token);\\r\\n    uint256 priceToken;\\r\\n    uint256 tokenValue;\\r\\n    uint256 price;\\r\\n    uint256 i;\\r\\n    if (quickSushiLP) {\\r\\n      address[2] memory tokens;\\r\\n      uint256[2] memory amounts;\\r\\n      (tokens, amounts) = getUniUnderlying(token);\\r\\n      for (i=0;i<2;i++) {\\r\\n        priceToken = computePrice(tokens[i]);\\r\\n        if (priceToken == 0) {\\r\\n          price = 0;\\r\\n          return price;\\r\\n        }\\r\\n        tokenValue = priceToken*amounts[i]/10**precisionDecimals;\\r\\n        price = price + tokenValue;\\r\\n      }\\r\\n      return price;\\r\\n    } else {\\r\\n      return computePrice(token);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  //Checks if address is Quick or Sushi LP.\\r\\n  function isQuickSushiCheck(address token) internal view returns (bool) {\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n    return checkFactory(pair, quickswapFactoryAddress) || checkFactory(pair, sushiswapFactoryAddress);\\r\\n  }\\r\\n\\r\\n  function isEqualString(string memory arg1, string memory arg2) internal pure returns (bool) {\\r\\n    bool check = (keccak256(abi.encodePacked(arg1)) == keccak256(abi.encodePacked(arg2)))? true:false;\\r\\n    return check;\\r\\n  }\\r\\n\\r\\n  function checkFactory(IUniswapV2Pair pair, address compareFactory) internal view returns (bool) {\\r\\n    bool check;\\r\\n    try pair.factory{gas: 3000}() returns (address factory) {\\r\\n      check = (factory == compareFactory)? true:false;\\r\\n    } catch {\\r\\n      check = false;\\r\\n    }\\r\\n    return check;\\r\\n  }\\r\\n\\r\\n  //Get underlying tokens and amounts for Quick/Sushi LPs\\r\\n  function getUniUnderlying(address token) public view returns (address[2] memory, uint256[2] memory) {\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n    address[2] memory tokens;\\r\\n    uint256[2] memory amounts;\\r\\n    tokens[0] = pair.token0();\\r\\n    tokens[1] = pair.token1();\\r\\n    uint256 token0Decimals = ERC20(tokens[0]).decimals();\\r\\n    uint256 token1Decimals = ERC20(tokens[1]).decimals();\\r\\n    uint256 supplyDecimals = ERC20(token).decimals();\\r\\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n    uint256 totalSupply = pair.totalSupply();\\r\\n    if (reserve0 == 0 || reserve1 == 0 || totalSupply == 0) {\\r\\n      amounts[0] = 0;\\r\\n      amounts[1] = 0;\\r\\n      return (tokens, amounts);\\r\\n    }\\r\\n    amounts[0] = reserve0*10**(supplyDecimals-token0Decimals+precisionDecimals)/totalSupply;\\r\\n    amounts[1] = reserve1*10**(supplyDecimals-token1Decimals+precisionDecimals)/totalSupply;\\r\\n    return (tokens, amounts);\\r\\n  }\\r\\n\\r\\n  //General function to compute the price of a token vs the defined output token.\\r\\n  function computePrice(address token) public view returns (uint256) {\\r\\n    uint256 price;\\r\\n    if (token == definedOutputToken) {\\r\\n      price = 10**precisionDecimals;\\r\\n    } else if (token == address(0)) {\\r\\n      price = 0;\\r\\n    } else {\\r\\n      (address keyToken, bool quick) = getLargestPool(token,keyTokens);\\r\\n      uint256 priceVsKeyToken;\\r\\n      uint256 keyTokenPrice;\\r\\n      if (keyToken == address(0)) {\\r\\n        price = 0;\\r\\n      } else if (quick) {\\r\\n        priceVsKeyToken = getPriceVsToken(token,keyToken);\\r\\n        keyTokenPrice = getKeyTokenPrice(keyToken);\\r\\n        price = priceVsKeyToken*keyTokenPrice/10**precisionDecimals;\\r\\n      } else {\\r\\n        priceVsKeyToken = getPriceVsTokenSushi(token,keyToken);\\r\\n        keyTokenPrice = getKeyTokenPrice(keyToken);\\r\\n        price = priceVsKeyToken*keyTokenPrice/10**precisionDecimals;\\r\\n      }\\r\\n    }\\r\\n    return (price);\\r\\n  }\\r\\n\\r\\n  //Gives the Quickswap pool with largest liquidity for a given token and a given tokenset (either keyTokens or pricingTokens)\\r\\n  function getLargestPool(address token, address[] memory tokenList) internal view returns (address, bool) {\\r\\n    uint256 largestPoolSize = 0;\\r\\n    address largestKeyToken;\\r\\n    uint256 poolSize;\\r\\n    uint256 i;\\r\\n    uint256 poolSizeQuick;\\r\\n    uint256 poolSizeSushi;\\r\\n    bool largestPoolIsQuick;\\r\\n    for (i=0;i<tokenList.length;i++) {\\r\\n      address pairAddressQuick = quickswapFactory.getPair(token,tokenList[i]);\\r\\n      address pairAddressSushi = sushiswapFactory.getPair(token,tokenList[i]);\\r\\n      if (pairAddressQuick!=address(0)) {\\r\\n        poolSizeQuick = getPoolSize(pairAddressQuick, token);\\r\\n      }\\r\\n      if (pairAddressSushi!=address(0)) {\\r\\n        poolSizeSushi = getPoolSize(pairAddressSushi, token);\\r\\n      }\\r\\n      bool quickDex = (poolSizeQuick > poolSizeSushi);\\r\\n      poolSize = (quickDex)? poolSizeQuick:poolSizeSushi;\\r\\n      if (poolSize > largestPoolSize) {\\r\\n        largestPoolSize = poolSize;\\r\\n        largestKeyToken = tokenList[i];\\r\\n        largestPoolIsQuick = quickDex;\\r\\n      }\\r\\n    }\\r\\n    return (largestKeyToken, largestPoolIsQuick);\\r\\n  }\\r\\n\\r\\n  function getPoolSize(address pairAddress, address token) internal view returns(uint256) {\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n    address token0 = pair.token0();\\r\\n    (uint112 poolSize0, uint112 poolSize1,) = pair.getReserves();\\r\\n    uint256 poolSize = (token==token0)? poolSize0:poolSize1;\\r\\n    return poolSize;\\r\\n  }\\r\\n\\r\\n//Generic function giving the price of a given token vs another given token on Quickswap.\\r\\nfunction getPriceVsToken(address token0, address token1) internal view returns (uint256) {\\r\\n  address pairAddress = quickswapFactory.getPair(token0,token1);\\r\\n  IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n  (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n  uint256 token0Decimals = ERC20(token0).decimals();\\r\\n  uint256 token1Decimals = ERC20(token1).decimals();\\r\\n  uint256 price;\\r\\n  if (token0 == pair.token0()) {\\r\\n    price = (reserve1*10**(token0Decimals-token1Decimals+precisionDecimals))/reserve0;\\r\\n  } else {\\r\\n    price = (reserve0*10**(token0Decimals-token1Decimals+precisionDecimals))/reserve1;\\r\\n  }\\r\\n  return price;\\r\\n}\\r\\n\\r\\n  //Generic function giving the price of a given token vs another given token on Sushiswap.\\r\\n  function getPriceVsTokenSushi(address token0, address token1) internal view returns (uint256) {\\r\\n    address pairAddress = sushiswapFactory.getPair(token0,token1);\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n    (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n    uint256 token0Decimals = ERC20(token0).decimals();\\r\\n    uint256 token1Decimals = ERC20(token1).decimals();\\r\\n    uint256 price;\\r\\n    if (token0 == pair.token0()) {\\r\\n      price = (reserve1*10**(token0Decimals-token1Decimals+precisionDecimals))/reserve0;\\r\\n    } else {\\r\\n      price = (reserve0*10**(token0Decimals-token1Decimals+precisionDecimals))/reserve1;\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n  //Gives the price of a given keyToken.\\r\\n  function getKeyTokenPrice(address token) internal view returns (uint256) {\\r\\n    bool isPricingToken = checkPricingToken(token);\\r\\n    uint256 price;\\r\\n    uint256 priceVsPricingToken;\\r\\n    if (token == definedOutputToken) {\\r\\n      price = 10**precisionDecimals;\\r\\n    } else if (isPricingToken) {\\r\\n//      price = getPriceVsTokenQuick(token,definedOutputToken);\\r\\n      price = getPriceVsTokenSushi(token,definedOutputToken);\\r\\n    } else {\\r\\n      uint256 pricingTokenPrice;\\r\\n      (address pricingToken, bool quick) = getLargestPool(token,pricingTokens);\\r\\n      if (quick) {\\r\\n        priceVsPricingToken = getPriceVsToken(token,pricingToken);\\r\\n      } else {\\r\\n        priceVsPricingToken = getPriceVsTokenSushi(token,pricingToken);\\r\\n      }\\r\\n\\r\\n      pricingTokenPrice = (pricingToken == definedOutputToken)? 10**precisionDecimals:getPriceVsTokenSushi(pricingToken,definedOutputToken);\\r\\n      price = priceVsPricingToken*pricingTokenPrice/10**precisionDecimals;\\r\\n    }\\r\\n    return price;\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the pricingTokens list.\\r\\n  function checkPricingToken(address token) public view returns (bool) {\\r\\n    uint256 i;\\r\\n    for (i=0;i<pricingTokens.length;i++) {\\r\\n      if (token == pricingTokens[i]) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  //Checks if a given token is in the keyTokens list.\\r\\n  function checkKeyToken(address token) public view returns (bool) {\\r\\n    uint256 i;\\r\\n    for (i=0;i<keyTokens.length;i++) {\\r\\n      if (token == keyTokens[i]) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7cedc74a0234b8d4afd201be2f78f172509289d00e0aee5f391a7a97bd75785a\",\"license\":\"MIT\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract Storage {\\r\\n\\r\\n  address public governance;\\r\\n  address public controller;\\r\\n\\r\\n  constructor() public {\\r\\n    governance = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n  function setController(address _controller) public onlyGovernance {\\r\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\r\\n    controller = _controller;\\r\\n  }\\r\\n\\r\\n  function isGovernance(address account) public view returns (bool) {\\r\\n    return account == governance;\\r\\n  }\\r\\n\\r\\n  function isController(address account) public view returns (bool) {\\r\\n    return account == controller;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x19a387b1fe3c5e9c8d73ccf25c61477ec90b5fc15d02619806c1a77193c36044\",\"license\":\"MIT\"},\"contracts/interface/mooniswap/IMooniFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IMooniFactory {\\r\\n  function isPool(address token) external view returns(bool);\\r\\n  function getAllPools() external view returns(address[] memory);\\r\\n  function pools(address tokenA, address tokenB) external view returns(address);\\r\\n}\\r\\n\",\"keccak256\":\"0x1a3b42b8e77ca0db2432d14735ff3589a4c79738652c6cbb96df50e1d8f1d1e8\",\"license\":\"MIT\"},\"contracts/interface/mooniswap/IMooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IMooniswap {\\r\\n  function getBalanceForRemoval(address token) external view returns(uint256);\\r\\n  function token0() external view returns(address);\\r\\n  function token1() external view returns(address);\\r\\n  function totalSupply() external view returns(uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc5890b3c498b04a347164a503e443822d34a23725aead12a44f9a1a71f611e13\",\"license\":\"MIT\"},\"contracts/interface/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n  function allPairs(uint) external view returns (address pair);\\r\\n  function allPairsLength() external view returns (uint);\\r\\n\\r\\n  function feeTo() external view returns (address);\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\",\"keccak256\":\"0xc51e6f2073f3b5ac00c5b07da873df7f2636925f1999159371ef4a048bc4df90\",\"license\":\"MIT\"},\"contracts/interface/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n *Submitted for verification at Etherscan.io on 2020-05-05\\r\\n*/\\r\\n\\r\\n// File: contracts/interfaces/IUniswapV2Pair.sol\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0x7ef2a5f00e724edc49c2fe177c57d7a05b018aa244c457705edc89c5a759d6cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600180546001600160a01b0319908116735757371414417b8c6caad45baef941abc7d3ab32179182905560028054821673c35dadb65012ec5796536bd9864ed8773abc74c4179081905560126003556004805483166001600160a01b03948516179055600580549092169216919091179055610140604052730d500b1d8e8ef31e21c99d1db9a6444d3adf12706080908152732791bca1f2de4661ed88a30c99a7a9449aa8417460a052737ceb23fd6bc0add59e62ac25578270cff1b9f61960c052738f3cf7ad23cd3cadbd9735aff958023239c6a06360e05273c2132d05d31c914a87c6611c10748aeb04b58e8f61010052731bfd67037b42cf73acf2047067bd4f2c47d9bfd6610120526200011a9060069081620002b0565b506040805160c081018252730d500b1d8e8ef31e21c99d1db9a6444d3adf12708152732791bca1f2de4661ed88a30c99a7a9449aa841746020820152737ceb23fd6bc0add59e62ac25578270cff1b9f61991810191909152738f3cf7ad23cd3cadbd9735aff958023239c6a063606082015273c2132d05d31c914a87c6611c10748aeb04b58e8f6080820152731bfd67037b42cf73acf2047067bd4f2c47d9bfd660a0820152620001d0906007906006620002b0565b50600880546001600160a01b031916732791bca1f2de4661ed88a30c99a7a9449aa841741790553480156200020457600080fd5b506040516200248238038062002482833981810160405260208110156200022a57600080fd5b5051806001600160a01b03811662000289576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055506200033b565b82805482825590600052602060002090810192821562000308579160200282015b828111156200030857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002d1565b50620003169291506200031a565b5090565b5b80821115620003165780546001600160a01b03191681556001016200031b565b612137806200034b6000396000f3fe608060405234801561001057600080fd5b50600436106101075760003560e01c8063225f879c1461010c57806331aa95e51461013457806341976e091461015a5780634897fa451461019257806349a40e0f1461021f57806355a31dd8146102585780635aa6e675146102605780638225458d146102685780638988d54f1461028e5780639137c1a714610296578063975057e7146102bc5780639b4f2278146102c4578063a52cd773146102ea578063ab6e623a14610324578063be68c3491461034a578063cabbd36414610370578063d47e25db14610396578063ddebf7951461039e578063deed7a5b146103c4578063e6f61472146103e1578063e9b0e2f714610407575b600080fd5b6101326004803603602081101561012257600080fd5b50356001600160a01b031661040f565b005b6101326004803603602081101561014a57600080fd5b50356001600160a01b031661059d565b6101806004803603602081101561017057600080fd5b50356001600160a01b03166106b7565b60408051918252519081900360200190f35b6101b8600480360360208110156101a857600080fd5b50356001600160a01b03166107a9565b6040518083600260200280838360005b838110156101e05781810151838201526020016101c8565b5050505090500182600260200280838360005b8381101561020b5781810151838201526020016101f3565b505050509050019250505060405180910390f35b61023c6004803603602081101561023557600080fd5b5035610b8a565b604080516001600160a01b039092168252519081900360200190f35b61023c610bb1565b61023c610bc0565b6101326004803603602081101561027e57600080fd5b50356001600160a01b0316610c40565b610180610e7d565b610132600480360360208110156102ac57600080fd5b50356001600160a01b0316610e83565b61023c610fb9565b610132600480360360208110156102da57600080fd5b50356001600160a01b0316610fc8565b6103106004803603602081101561030057600080fd5b50356001600160a01b03166111a8565b604080519115158252519081900360200190f35b6101326004803603602081101561033a57600080fd5b50356001600160a01b03166111fd565b6101326004803603602081101561036057600080fd5b50356001600160a01b031661144d565b6101326004803603602081101561038657600080fd5b50356001600160a01b0316611567565b61023c6116ce565b610180600480360360208110156103b457600080fd5b50356001600160a01b03166116dd565b61023c600480360360208110156103da57600080fd5b503561180b565b610310600480360360208110156103f757600080fd5b50356001600160a01b0316611818565b61023c611864565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d602081101561048457600080fd5b50516104c8576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6104d181611818565b15610519576040805162461bcd60e51b815260206004820152601360248201527220b63932b0b23c90309035b2bc903a37b5b2b760691b604482015290519081900360640190fd5b600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f0a56c88bece4295107fd874c5ddacbb849aebef9d72fc42d81dd2b5caeaec1c69181900360200190a150565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156105e857600080fd5b505afa1580156105fc573d6000803e3d6000fd5b505050506040513d602081101561061257600080fd5b5051610656576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600180546001600160a01b038381166001600160a01b0319808416821794859055600480549091169483169490941790935560408051938452911660208301819052815190926000805160206120e283398151915292908290030190a15050565b6008546000906001600160a01b03838116911614156106dc5750600354600a0a6107a4565b60006106e783611873565b90506000806000808415610793576106fd6120c3565b6107056120c3565b61070e896107a9565b6000945090925090505b60028310156107845761073a82846002811061073057fe5b60200201516116dd565b9550856107525750600096506107a495505050505050565b600354600a0a81846002811061076457fe5b602002015187028161077257fe5b04945092840192600190920191610718565b839750505050505050506107a4565b61079c876116dd565b955050505050505b919050565b6107b16120c3565b6107b96120c3565b826107c26120c3565b6107ca6120c3565b826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561080357600080fd5b505afa158015610817573d6000803e3d6000fd5b505050506040513d602081101561082d57600080fd5b50516001600160a01b0390811683526040805163d21220a760e01b815290519185169163d21220a791600480820192602092909190829003018186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d60208110156108a057600080fd5b50518260016001600160a01b0390921660209290920201526000828160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d602081101561092357600080fd5b505160ff169050600083600160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561096c57600080fd5b505afa158015610980573d6000803e3d6000fd5b505050506040513d602081101561099657600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d6020811015610a0c57600080fd5b505160408051630240bc6b60e21b8152905160ff909216925060009182916001600160a01b038a1691630902f1ac91600480820192606092909190829003018186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d6060811015610a8557600080fd5b508051602091820151604080516318160ddd60e01b815290516001600160701b0393841696509290911693506000926001600160a01b038c16926318160ddd926004808201939291829003018186803b158015610ae157600080fd5b505afa158015610af5573d6000803e3d6000fd5b505050506040513d6020811015610b0b57600080fd5b50519050821580610b1a575081155b80610b23575080155b15610b455750506000808652602086015250939650919450610b859350505050565b8060035487860301600a0a840281610b5957fe5b048752600354819086860301600a0a830281610b7157fe5b046020880152509598509396505050505050505b915091565b60068181548110610b9757fe5b6000918252602090912001546001600160a01b0316905081565b6002546001600160a01b031681565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0f57600080fd5b505afa158015610c23573d6000803e3d6000fd5b505050506040513d6020811015610c3957600080fd5b5051905090565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610c8b57600080fd5b505afa158015610c9f573d6000803e3d6000fd5b505050506040513d6020811015610cb557600080fd5b5051610cf9576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b80610d03816111a8565b610d4a576040805162461bcd60e51b81526020600482015260136024820152722737ba103090283934b1b4b733902a37b5b2b760691b604482015290519081900360640190fd5b60005b600754811015610d905760078181548110610d6457fe5b6000918252602090912001546001600160a01b0384811691161415610d8857610d90565b600101610d4d565b60075460001901811015610e055760078160010181548110610dae57fe5b600091825260209091200154600780546001600160a01b039092169183908110610dd457fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101610d90565b6007805480610e1057fe5b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590557f267d2347865e6ed4881b044841cfb54745c81ca42c65b9c38e5f24391813642b8360405180826001600160a01b0316815260200191505060405180910390a1505050565b60035481565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610ece57600080fd5b505afa158015610ee2573d6000803e3d6000fd5b505050506040513d6020811015610ef857600080fd5b5051610f3c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610f97576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d602081101561103d57600080fd5b5051611081576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061108b81611818565b6110ce576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b6110d7826111a8565b15611123576040805162461bcd60e51b815260206004820152601760248201527620b63932b0b23c903090383934b1b4b733903a37b5b2b760491b604482015290519081900360640190fd5b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517fa2411adfb9f4f19415027646ef07d6436cb8911befcf9d7540902498597158b49181900360200190a15050565b6000805b6007548110156111f457600781815481106111c357fe5b6000918252602090912001546001600160a01b03848116911614156111ec5760019150506107a4565b6001016111ac565b50600092915050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561124857600080fd5b505afa15801561125c573d6000803e3d6000fd5b505050506040513d602081101561127257600080fd5b50516112b6576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806112c081611818565b611303576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b60005b600654811015611349576006818154811061131d57fe5b6000918252602090912001546001600160a01b038481169116141561134157611349565b600101611306565b600654600019018110156113be576006816001018154811061136757fe5b600091825260209091200154600680546001600160a01b03909216918390811061138d57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611349565b60068054806113c957fe5b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590557fb96050be102aa5c8996d5413c2c6a643eda5e34df5f00774e64542ac53d95c7c8360405180826001600160a01b0316815260200191505060405180910390a161143a836111a8565b156114485761144883610c40565b505050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561149857600080fd5b505afa1580156114ac573d6000803e3d6000fd5b505050506040513d60208110156114c257600080fd5b5051611506576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600280546001600160a01b038381166001600160a01b0319808416821794859055600580549091169483169490941790935560408051938452911660208301819052815190926000805160206120e283398151915292908290030190a15050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156115b257600080fd5b505afa1580156115c6573d6000803e3d6000fd5b505050506040513d60208110156115dc57600080fd5b5051611620576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061162a81611818565b61166d576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b600880546001600160a01b038481166001600160a01b03198316811790935560408051938452911660208301819052815190927f0d72f09a133ec2549b665f4e98744e4e4be092ded65ebf4860c7d390890c5d3192908290030190a1505050565b6008546001600160a01b031681565b60085460009081906001600160a01b03848116911614156117045750600354600a0a611805565b6001600160a01b03831661171a57506000611805565b60008061178185600680548060200260200160405190810160405280929190818152602001828054801561177757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611759575b50505050506118b3565b90925090506000806001600160a01b0384166117a05760009450611800565b82156117d5576117b08785611aaa565b91506117bb84611d6c565b9050600354600a0a818302816117cd57fe5b049450611800565b6117df8785611eaf565b91506117ea84611d6c565b9050600354600a0a818302816117fc57fe5b0494505b505050505b92915050565b60078181548110610b9757fe5b6000805b6006548110156111f4576006818154811061183357fe5b6000918252602090912001546001600160a01b038481169116141561185c5760019150506107a4565b60010161181c565b6001546001600160a01b031681565b600154600090829061188f9082906001600160a01b0316611f06565b806118ac57506002546118ac9082906001600160a01b0316611f06565b9392505050565b600080808080808080805b8951841015611a99576004548a516000916001600160a01b03169063e6a43905908e908e90899081106118ed57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561194257600080fd5b505afa158015611956573d6000803e3d6000fd5b505050506040513d602081101561196c57600080fd5b50516005548c519192506000916001600160a01b039091169063e6a43905908f908f908a90811061199957fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156119ee57600080fd5b505afa158015611a02573d6000803e3d6000fd5b505050506040513d6020811015611a1857600080fd5b505190506001600160a01b03821615611a3857611a35828e611fa3565b94505b6001600160a01b03811615611a5457611a51818e611fa3565b93505b83851180611a625784611a64565b855b975089881115611a8b578799508c8781518110611a7d57fe5b602002602001015198508093505b5050600190940193506118be565b949a94995093975050505050505050565b600480546040805163e6a4390560e01b81526001600160a01b0386811694820194909452848416602482015290516000938493169163e6a43905916044808301926020929190829003018186803b158015611b0457600080fd5b505afa158015611b18573d6000803e3d6000fd5b505050506040513d6020811015611b2e57600080fd5b505160408051630240bc6b60e21b81529051919250829160009182916001600160a01b03851691630902f1ac916004808301926060929190829003018186803b158015611b7a57600080fd5b505afa158015611b8e573d6000803e3d6000fd5b505050506040513d6060811015611ba457600080fd5b5080516020918201516040805163313ce56760e01b815290516001600160701b0393841696509290911693506000926001600160a01b038b169263313ce567926004808201939291829003018186803b158015611c0057600080fd5b505afa158015611c14573d6000803e3d6000fd5b505050506040513d6020811015611c2a57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038a169163313ce567916004808301926020929190829003018186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d6020811015611ca057600080fd5b505160408051630dfe168160e01b8152905160ff90921692506000916001600160a01b03881691630dfe1681916004808301926020929190829003018186803b158015611cec57600080fd5b505afa158015611d00573d6000803e3d6000fd5b505050506040513d6020811015611d1657600080fd5b50516001600160a01b038b811691161415611d47578460035483850301600a0a850281611d3f57fe5b049050611d5f565b8360035483850301600a0a860281611d5b57fe5b0490505b9998505050505050505050565b600080611d78836111a8565b60085490915060009081906001600160a01b0386811691161415611da357600354600a0a9150611ea7565b8215611dc757600854611dc09086906001600160a01b0316611eaf565b9150611ea7565b6000806000611e2e886007805480602002602001604051908101604052809291908181526020018280548015611777576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116117595750505050506118b3565b915091508015611e4957611e428883611aaa565b9350611e56565b611e538883611eaf565b93505b6008546001600160a01b03838116911614611e8757600854611e829083906001600160a01b0316611eaf565b611e8e565b600354600a0a5b9250600354600a0a83850281611ea057fe5b0494505050505b509392505050565b6005546040805163e6a4390560e01b81526001600160a01b038581166004830152848116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b158015611b0457600080fd5b600080836001600160a01b031663c45a0155610bb86040518263ffffffff1660e01b815260040160206040518083038187803b158015611f4557600080fd5b5086fa93505050508015611f6b57506040513d6020811015611f6657600080fd5b505160015b611f77575060006118ac565b836001600160a01b0316816001600160a01b031614611f97576000611f9a565b60015b95945050505050565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe457600080fd5b505afa158015611ff8573d6000803e3d6000fd5b505050506040513d602081101561200e57600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03861691630902f1ac91600480820192606092909190829003018186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d606081101561208357600080fd5b508051602090910151909250905060006001600160a01b03878116908516146120ac57816120ae565b825b6001600160701b031698975050505050505050565b6040518060400160405280600290602082028036833750919291505056fef36cf3b7f3187ed5217f19ea5137ed68a98983b4d678c78eb886fc378d2c13cfa2646970667358221220d31541cb209a33838bddc5456d39066a3b40547acaf7c4c8ff6cc0bd069f2a8764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101075760003560e01c8063225f879c1461010c57806331aa95e51461013457806341976e091461015a5780634897fa451461019257806349a40e0f1461021f57806355a31dd8146102585780635aa6e675146102605780638225458d146102685780638988d54f1461028e5780639137c1a714610296578063975057e7146102bc5780639b4f2278146102c4578063a52cd773146102ea578063ab6e623a14610324578063be68c3491461034a578063cabbd36414610370578063d47e25db14610396578063ddebf7951461039e578063deed7a5b146103c4578063e6f61472146103e1578063e9b0e2f714610407575b600080fd5b6101326004803603602081101561012257600080fd5b50356001600160a01b031661040f565b005b6101326004803603602081101561014a57600080fd5b50356001600160a01b031661059d565b6101806004803603602081101561017057600080fd5b50356001600160a01b03166106b7565b60408051918252519081900360200190f35b6101b8600480360360208110156101a857600080fd5b50356001600160a01b03166107a9565b6040518083600260200280838360005b838110156101e05781810151838201526020016101c8565b5050505090500182600260200280838360005b8381101561020b5781810151838201526020016101f3565b505050509050019250505060405180910390f35b61023c6004803603602081101561023557600080fd5b5035610b8a565b604080516001600160a01b039092168252519081900360200190f35b61023c610bb1565b61023c610bc0565b6101326004803603602081101561027e57600080fd5b50356001600160a01b0316610c40565b610180610e7d565b610132600480360360208110156102ac57600080fd5b50356001600160a01b0316610e83565b61023c610fb9565b610132600480360360208110156102da57600080fd5b50356001600160a01b0316610fc8565b6103106004803603602081101561030057600080fd5b50356001600160a01b03166111a8565b604080519115158252519081900360200190f35b6101326004803603602081101561033a57600080fd5b50356001600160a01b03166111fd565b6101326004803603602081101561036057600080fd5b50356001600160a01b031661144d565b6101326004803603602081101561038657600080fd5b50356001600160a01b0316611567565b61023c6116ce565b610180600480360360208110156103b457600080fd5b50356001600160a01b03166116dd565b61023c600480360360208110156103da57600080fd5b503561180b565b610310600480360360208110156103f757600080fd5b50356001600160a01b0316611818565b61023c611864565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d602081101561048457600080fd5b50516104c8576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6104d181611818565b15610519576040805162461bcd60e51b815260206004820152601360248201527220b63932b0b23c90309035b2bc903a37b5b2b760691b604482015290519081900360640190fd5b600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f0a56c88bece4295107fd874c5ddacbb849aebef9d72fc42d81dd2b5caeaec1c69181900360200190a150565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156105e857600080fd5b505afa1580156105fc573d6000803e3d6000fd5b505050506040513d602081101561061257600080fd5b5051610656576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600180546001600160a01b038381166001600160a01b0319808416821794859055600480549091169483169490941790935560408051938452911660208301819052815190926000805160206120e283398151915292908290030190a15050565b6008546000906001600160a01b03838116911614156106dc5750600354600a0a6107a4565b60006106e783611873565b90506000806000808415610793576106fd6120c3565b6107056120c3565b61070e896107a9565b6000945090925090505b60028310156107845761073a82846002811061073057fe5b60200201516116dd565b9550856107525750600096506107a495505050505050565b600354600a0a81846002811061076457fe5b602002015187028161077257fe5b04945092840192600190920191610718565b839750505050505050506107a4565b61079c876116dd565b955050505050505b919050565b6107b16120c3565b6107b96120c3565b826107c26120c3565b6107ca6120c3565b826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561080357600080fd5b505afa158015610817573d6000803e3d6000fd5b505050506040513d602081101561082d57600080fd5b50516001600160a01b0390811683526040805163d21220a760e01b815290519185169163d21220a791600480820192602092909190829003018186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d60208110156108a057600080fd5b50518260016001600160a01b0390921660209290920201526000828160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d602081101561092357600080fd5b505160ff169050600083600160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561096c57600080fd5b505afa158015610980573d6000803e3d6000fd5b505050506040513d602081101561099657600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038b169163313ce567916004808301926020929190829003018186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d6020811015610a0c57600080fd5b505160408051630240bc6b60e21b8152905160ff909216925060009182916001600160a01b038a1691630902f1ac91600480820192606092909190829003018186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d6060811015610a8557600080fd5b508051602091820151604080516318160ddd60e01b815290516001600160701b0393841696509290911693506000926001600160a01b038c16926318160ddd926004808201939291829003018186803b158015610ae157600080fd5b505afa158015610af5573d6000803e3d6000fd5b505050506040513d6020811015610b0b57600080fd5b50519050821580610b1a575081155b80610b23575080155b15610b455750506000808652602086015250939650919450610b859350505050565b8060035487860301600a0a840281610b5957fe5b048752600354819086860301600a0a830281610b7157fe5b046020880152509598509396505050505050505b915091565b60068181548110610b9757fe5b6000918252602090912001546001600160a01b0316905081565b6002546001600160a01b031681565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0f57600080fd5b505afa158015610c23573d6000803e3d6000fd5b505050506040513d6020811015610c3957600080fd5b5051905090565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610c8b57600080fd5b505afa158015610c9f573d6000803e3d6000fd5b505050506040513d6020811015610cb557600080fd5b5051610cf9576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b80610d03816111a8565b610d4a576040805162461bcd60e51b81526020600482015260136024820152722737ba103090283934b1b4b733902a37b5b2b760691b604482015290519081900360640190fd5b60005b600754811015610d905760078181548110610d6457fe5b6000918252602090912001546001600160a01b0384811691161415610d8857610d90565b600101610d4d565b60075460001901811015610e055760078160010181548110610dae57fe5b600091825260209091200154600780546001600160a01b039092169183908110610dd457fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101610d90565b6007805480610e1057fe5b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590557f267d2347865e6ed4881b044841cfb54745c81ca42c65b9c38e5f24391813642b8360405180826001600160a01b0316815260200191505060405180910390a1505050565b60035481565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b158015610ece57600080fd5b505afa158015610ee2573d6000803e3d6000fd5b505050506040513d6020811015610ef857600080fd5b5051610f3c576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b6001600160a01b038116610f97576040805162461bcd60e51b815260206004820152601e60248201527f6e65772073746f726167652073686f756c646e277420626520656d7074790000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031681565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561101357600080fd5b505afa158015611027573d6000803e3d6000fd5b505050506040513d602081101561103d57600080fd5b5051611081576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061108b81611818565b6110ce576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b6110d7826111a8565b15611123576040805162461bcd60e51b815260206004820152601760248201527620b63932b0b23c903090383934b1b4b733903a37b5b2b760491b604482015290519081900360640190fd5b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0384166001600160a01b0319909116811790915560408051918252517fa2411adfb9f4f19415027646ef07d6436cb8911befcf9d7540902498597158b49181900360200190a15050565b6000805b6007548110156111f457600781815481106111c357fe5b6000918252602090912001546001600160a01b03848116911614156111ec5760019150506107a4565b6001016111ac565b50600092915050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561124857600080fd5b505afa15801561125c573d6000803e3d6000fd5b505050506040513d602081101561127257600080fd5b50516112b6576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b806112c081611818565b611303576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b60005b600654811015611349576006818154811061131d57fe5b6000918252602090912001546001600160a01b038481169116141561134157611349565b600101611306565b600654600019018110156113be576006816001018154811061136757fe5b600091825260209091200154600680546001600160a01b03909216918390811061138d57fe5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600101611349565b60068054806113c957fe5b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590557fb96050be102aa5c8996d5413c2c6a643eda5e34df5f00774e64542ac53d95c7c8360405180826001600160a01b0316815260200191505060405180910390a161143a836111a8565b156114485761144883610c40565b505050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b15801561149857600080fd5b505afa1580156114ac573d6000803e3d6000fd5b505050506040513d60208110156114c257600080fd5b5051611506576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b600280546001600160a01b038381166001600160a01b0319808416821794859055600580549091169483169490941790935560408051938452911660208301819052815190926000805160206120e283398151915292908290030190a15050565b600054604080516337b87c3960e21b815233600482015290516001600160a01b039092169163dee1f0e491602480820192602092909190829003018186803b1580156115b257600080fd5b505afa1580156115c6573d6000803e3d6000fd5b505050506040513d60208110156115dc57600080fd5b5051611620576040805162461bcd60e51b815260206004820152600e60248201526d4e6f7420676f7665726e616e636560901b604482015290519081900360640190fd5b8061162a81611818565b61166d576040805162461bcd60e51b815260206004820152600f60248201526e2737ba10309025b2bc902a37b5b2b760891b604482015290519081900360640190fd5b600880546001600160a01b038481166001600160a01b03198316811790935560408051938452911660208301819052815190927f0d72f09a133ec2549b665f4e98744e4e4be092ded65ebf4860c7d390890c5d3192908290030190a1505050565b6008546001600160a01b031681565b60085460009081906001600160a01b03848116911614156117045750600354600a0a611805565b6001600160a01b03831661171a57506000611805565b60008061178185600680548060200260200160405190810160405280929190818152602001828054801561177757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611759575b50505050506118b3565b90925090506000806001600160a01b0384166117a05760009450611800565b82156117d5576117b08785611aaa565b91506117bb84611d6c565b9050600354600a0a818302816117cd57fe5b049450611800565b6117df8785611eaf565b91506117ea84611d6c565b9050600354600a0a818302816117fc57fe5b0494505b505050505b92915050565b60078181548110610b9757fe5b6000805b6006548110156111f4576006818154811061183357fe5b6000918252602090912001546001600160a01b038481169116141561185c5760019150506107a4565b60010161181c565b6001546001600160a01b031681565b600154600090829061188f9082906001600160a01b0316611f06565b806118ac57506002546118ac9082906001600160a01b0316611f06565b9392505050565b600080808080808080805b8951841015611a99576004548a516000916001600160a01b03169063e6a43905908e908e90899081106118ed57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561194257600080fd5b505afa158015611956573d6000803e3d6000fd5b505050506040513d602081101561196c57600080fd5b50516005548c519192506000916001600160a01b039091169063e6a43905908f908f908a90811061199957fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156119ee57600080fd5b505afa158015611a02573d6000803e3d6000fd5b505050506040513d6020811015611a1857600080fd5b505190506001600160a01b03821615611a3857611a35828e611fa3565b94505b6001600160a01b03811615611a5457611a51818e611fa3565b93505b83851180611a625784611a64565b855b975089881115611a8b578799508c8781518110611a7d57fe5b602002602001015198508093505b5050600190940193506118be565b949a94995093975050505050505050565b600480546040805163e6a4390560e01b81526001600160a01b0386811694820194909452848416602482015290516000938493169163e6a43905916044808301926020929190829003018186803b158015611b0457600080fd5b505afa158015611b18573d6000803e3d6000fd5b505050506040513d6020811015611b2e57600080fd5b505160408051630240bc6b60e21b81529051919250829160009182916001600160a01b03851691630902f1ac916004808301926060929190829003018186803b158015611b7a57600080fd5b505afa158015611b8e573d6000803e3d6000fd5b505050506040513d6060811015611ba457600080fd5b5080516020918201516040805163313ce56760e01b815290516001600160701b0393841696509290911693506000926001600160a01b038b169263313ce567926004808201939291829003018186803b158015611c0057600080fd5b505afa158015611c14573d6000803e3d6000fd5b505050506040513d6020811015611c2a57600080fd5b50516040805163313ce56760e01b8152905160ff90921692506000916001600160a01b038a169163313ce567916004808301926020929190829003018186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d6020811015611ca057600080fd5b505160408051630dfe168160e01b8152905160ff90921692506000916001600160a01b03881691630dfe1681916004808301926020929190829003018186803b158015611cec57600080fd5b505afa158015611d00573d6000803e3d6000fd5b505050506040513d6020811015611d1657600080fd5b50516001600160a01b038b811691161415611d47578460035483850301600a0a850281611d3f57fe5b049050611d5f565b8360035483850301600a0a860281611d5b57fe5b0490505b9998505050505050505050565b600080611d78836111a8565b60085490915060009081906001600160a01b0386811691161415611da357600354600a0a9150611ea7565b8215611dc757600854611dc09086906001600160a01b0316611eaf565b9150611ea7565b6000806000611e2e886007805480602002602001604051908101604052809291908181526020018280548015611777576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116117595750505050506118b3565b915091508015611e4957611e428883611aaa565b9350611e56565b611e538883611eaf565b93505b6008546001600160a01b03838116911614611e8757600854611e829083906001600160a01b0316611eaf565b611e8e565b600354600a0a5b9250600354600a0a83850281611ea057fe5b0494505050505b509392505050565b6005546040805163e6a4390560e01b81526001600160a01b038581166004830152848116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b158015611b0457600080fd5b600080836001600160a01b031663c45a0155610bb86040518263ffffffff1660e01b815260040160206040518083038187803b158015611f4557600080fd5b5086fa93505050508015611f6b57506040513d6020811015611f6657600080fd5b505160015b611f77575060006118ac565b836001600160a01b0316816001600160a01b031614611f97576000611f9a565b60015b95945050505050565b6000808390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe457600080fd5b505afa158015611ff8573d6000803e3d6000fd5b505050506040513d602081101561200e57600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03861691630902f1ac91600480820192606092909190829003018186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d606081101561208357600080fd5b508051602090910151909250905060006001600160a01b03878116908516146120ac57816120ae565b825b6001600160701b031698975050505050505050565b6040518060400160405280600290602082028036833750919291505056fef36cf3b7f3187ed5217f19ea5137ed68a98983b4d678c78eb886fc378d2c13cfa2646970667358221220d31541cb209a33838bddc5456d39066a3b40547acaf7c4c8ff6cc0bd069f2a8764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4786,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "store",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Storage)13147"
      },
      {
        "astId": 9857,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "quickswapFactoryAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9860,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "sushiswapFactoryAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9863,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "precisionDecimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9868,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "quickswapFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV2Factory)13804"
      },
      {
        "astId": 9873,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "sushiswapFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IUniswapV2Factory)13804"
      },
      {
        "astId": 9883,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "keyTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9893,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "pricingTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9896,
        "contract": "contracts/OracleMatic.sol:OracleMatic",
        "label": "definedOutputToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Factory)13804": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(Storage)13147": {
        "encoding": "inplace",
        "label": "contract Storage",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}